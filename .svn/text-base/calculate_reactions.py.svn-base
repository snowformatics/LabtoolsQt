# -*- coding: cp1252 -*-

import logging
import platform


from PyQt4 import QtCore, QtGui, QtDeclarative


def calc_ligation(insert_length,
                    vector_length,
                    insert_conc,
                    vector_conc,
                    molar_ratio,
                    total_volume):
    """Calculate ligation."""
    
    up = float(vector_conc) * float(insert_length) * float(molar_ratio)
    down = float(insert_conc) * float(vector_length)

    up_down_plus1 = (float(up) / float(down)) + float(1)

    vector_volume = float(total_volume) / float(up_down_plus1)
    vector_volume = round(vector_volume, 1)
    insert_volume = float(total_volume) - float(vector_volume)
    insert_volume = round(insert_volume, 1)
    text = 'Vector Volume : ' + str(vector_volume) + ' ÂµL\n' + 'Insert Volume : ' + str(insert_volume) + ' microL'
    return text

def calc_solution(compound,
                    molarity,
                    volume,
                    water,mm):
    
    """Calculate solution."""
    
    if compound in mm.keys():
        value = mm[compound]
        mass = float(value) * float(volume) * float(molarity) + water
        mass = round(mass, 4)
        text = "For a " + str(molarity) + " molare solution,\nweight out " + str(mass) + " g " + str(compound) + "\nand dissolve it in " +  str(volume) + " L water."
      
        return text
    
def calc_dilution(stock,
                    final,
                    volume,
                    stock_unit,
                    final_unit,
                    volume_unit):
    
    """Calculate dilution."""
    
    
    if stock_unit == final_unit:
        dilution_factor = float(stock)/float(final)
        dilution_volume = float(volume)/float(dilution_factor)
            
    elif stock_unit == 'mM' and final_unit == 'M':
        dilution_factor = float(stock)/float(final) / 1000
        dilution_volume = float(volume)/float(dilution_factor)

    elif stock_unit == 'M' and final_unit == 'mM':
        dilution_factor = float(stock)/float(final) * 1000
        dilution_volume = float(volume)/float(dilution_factor)
    
    

    text = "You need " + str(dilution_volume) + ' ' + str(volume_unit) + " stock solution (" + str(stock) + " " + str(stock_unit) + ")\nand " + str(float(volume)-float(dilution_volume)) + ' ' + str(volume_unit) + " dilution solution\nto make a " + str(volume) + " " + str(volume_unit) + "(" + str(final) +" " + str(final_unit) + ") solution."
    
    return text    
    
    
#    
#    if os.path.exists(db_location + str(db_name) + "_db_index.rev.1.ebwt"):
#        return ("Database successfully created!", True)
#    else:
#        logging.debug(time.strftime("%d.%m.%Y um %H:%M:%S Uhr"))
#        logging.debug(str(platform.system()+platform.release()))
#        logging.exception('Got exception on main handler')
#        return "Error, database could not be created!"